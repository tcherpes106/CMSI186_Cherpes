
Evaluation for homework 06: Brobdingnagian Integer
   and associated Collatz sequence using BrobInt

BrobInt class
Includes running BrobIntTester test harness
Includes running Neptune tester using several numbers
   View h6.bat or h6.sh to see test parameters used
   View testresults.txt to see resulting output
NOTE: "Brobdingnagian Integer" is abbreviated "BrobInt"
   per the discussion in class
=======================================================

The BrobInt.java file and the Neptune.java file must exists and compile.  There
are a total of 7 points awarded for the various methods listed for BrobInt.java.
There are a total of 9 points awarded for the Collatz.java file including the
seven test cases.  The BrobIntTester.java file is not required to be in the repo
but will be added if it is not there.  If you have made any modifications to the
BrobIntTester.java file which are not reflected in the version that is on *MY*
repo, PLEASE put a copy of *YOUR* version into *YOUR* repo for use in evaluation.

The BrobIntTester.java file will be used to verify correct operation of your
BrobInt methods.  The points awarded are as shown below for each of the BrobInt
operations.  Parial credit is awarded if some of the tests pass and others do
not; i.e., if four tests get correct answers for subtraction and three don't,
you will get 4 points for the subtraction tests.

Point distribution is spread to help insure that if you don't get the more
difficult methods to work, your score will not be impacted as heavily.  For
example, add and multiply should be straightforward to implement, so they have
ten tests each for a total of 20 points.  Division is the hardest, so it has
only four tests.  Remaindering is easy, but requires division to work, so it
has only two tests.

There are two "gimme" items, one for "equals" tests for which there are three
points, and one for the Neptune constructor which is worth one point.

For this exercise you are required to have JavaDoc commments in your code.  The
javadoc tool will be run on your code as explained in class, using a very basic
automated method.  Mismatches or javadoc errors will be counted against the
total maximum of two points, in 1/2 point increments.  For example, if your
code takes an argument that is not listed in the javadocs using a "@param" tag,
that will cost 1/2 point.  Four such errors mean you will lose the entire
javadoc credit for the project.

=======================================================

A total of one point each for the following,
   except where noted with "[of x]":

BrobInt class file:
BrobInt constructor exists             :   1 point
validate [method or code] exists       :   1 point
add method exists                      :   1 point
subtract method exists                 :   1 point
multiply method exists                 :   1 point
divide method exists                   :   1 point
remainder method exists                :   1 point
BrobInt compiles                       :   1 point
BrobInt class tests [1 pt each]        :   0 point [EC]

BrobIntTester class file:
BrobIntTester compiles:                :   1 point
constructor tests [of 7]               :   7 points
add [of 18]                            :  14 points
   [includes 6 more constructor tests]
subtract [of 9]                        :   9 points
multiply [of 14]                       :  14 points
allZero [gimme]                        :   1 point
divide [of 4]                          :   0 points
remainder [of 2]                       :   0 points

Neptune class file:
Neptune constructor [gimme]            :   0 point
Neptune input error handling [gimme]   :   0 point
Neptune output correct [of 4]          :   0 points

General scores:
Minimum two files in repo [of 2]       :   2 points
Coding Style [of 5]                    :   5 points

Total possible score: 78 points

Evaluation
==========
   your score is 61.00 out of 78.00
   you also got   0.00 extra credit points
    total score: 61.00 out of 78.00 = 78.21% which is a C-plus

DETAILED COMMENTS:
==================
Your BrobInt.java didn't compile.  There was an error on line 255 of your
divide method where you didn't dimension your byte[] array.  Since that
method is still throwing a "Not Implemented" exception, I just commented it out.

Once I fixed that, however, there were five more errors that showed up, which
gave the message:

Note: BrobInt.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

Running the compiler with:

javac BrobInt.java -Xlint:deprecation

gave five errors similar to:

BrobInt.java:286: warning: [deprecation] Long(long) in Long has been deprecated
         gi = new BrobInt( new Long( value ).toString() );
                           ^
1 warning

Four of the five errors were from lines 16-19 where the constants are defined
at the top of the file.  The new java version has deprecated that way of
constructing such classes.  I changed the five occurrences to the proper form
and now everything compiles and runs for BrobInt.java

You don't have any tests in there, though, so I can't give you any extra
credit points for that file.


Next, the BrobIntTester.java file has a compile error at line 601; apparently
you have removed the "allZeroDetect()" method.  I commented out that one
test and compiled again, and all is well.

Finally, compiling the Neptune.java file gave me 14 compile errors.  They are
all "cannot find symbol" errors.  I'm not going to try to track them down,
that is something you will have to do.  It costs you, because a) it doesn't
compile and b) I can't run the tests even for partial credit.

I renamed your BrobInt.java to BrobInt.java.original, and your BrobIntTester.java
to BrobIntTester.java.original, so that you have your original files to compare,
then put my updated files in your directory for evaluating.


So.....

You got all the constructor tests right.
You missed 4 of the 18 addition tests.
All the subtract tests are right.
All the multiply tests are right.
You didn't implement divide or remainder.

Neptune has compile errors, most of which look to be that you changed the names
of the methods in Neptune.java, and didn't use the ones you defined in BrobInt.java.

This was a hard lab, Timothy, and I know you struggled with it... if you don't
understand anything and want to schedule some one-on-one time, let me know.  It's
one of two or three really hard assignments you'll have in your career here at
LMU, but that's part of the challenge, right?  Don't give up ~ keep working hard
and you'll get there!


